[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Análisis Criminal",
    "section": "",
    "text": "Introducción\nEste libro tien por objetivo generar capacitar a la Subsecretaría de Prevención del Delito."
  },
  {
    "objectID": "datos.html#cargar-librerías-y-funciones",
    "href": "datos.html#cargar-librerías-y-funciones",
    "title": "1  Datos de Delitos",
    "section": "1.1 Cargar Librerías y Funciones",
    "text": "1.1 Cargar Librerías y Funciones\nEn primer lugar se procederá a cargar las librerías necesarias para realizar el tratamiento y transformaciones a los datos.\n\n## Manipulación de Tablas\nlibrary(dplyr)\nlibrary(purrr)\n\n## Manipulación de Fechas\nlibrary(lubridate)\n\n## Manipulación de Datos Espaciales\nlibrary(sf)\n\n## Visualización de Datos Espaciales\nlibrary(mapview)\n\n## Manipulación de Excel\nlibrary(openxlsx))\n\nTambién se cargarán las funciones creadas previamente, revisar el Appendix A.\n\n# Cargar Funciones\nsource(\"R/librerias.R\")"
  },
  {
    "objectID": "datos.html#lectura-de-datos",
    "href": "datos.html#lectura-de-datos",
    "title": "1  Datos de Delitos",
    "section": "1.2 Lectura de Datos",
    "text": "1.2 Lectura de Datos\nLos datos se encuentran en formato RDS separados por y sin ningún tratamiento. Se procederá a revisar el contenido de los datos del año 2017 llamado Casos_2017.rds.\n\ndatos_2017 <- readRDS(file = \"data/delitos/raw/Casos_2017.rds\")\nhead(datos_2017)\n\n\n\nSimple feature collection with 6 features and 29 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 158271 ymin: 5401271 xmax: 337234 ymax: 6343272\nProjected CRS: WGS 84 / UTM zone 19S\n                                                   DELITO         GRUPO\n1                                    HALLAZGO DE VEHICULO OTROS DELITOS\n2 VIOLENCIA INTRAFAMILIAR A MUJER (LESIONES PSICOLOGICAS)           VIF\n3 VIOLENCIA INTRAFAMILIAR A MUJER (LESIONES PSICOLOGICAS)           VIF\n4 VIOLENCIA INTRAFAMILIAR A MUJER (LESIONES M/GRAVES O SU           VIF\n5           ROBO CON INTIMIDACION ART. 433 436 INC. 1 438          DMCS\n6 HURTO SIMPLE POR UN VALOR DE MEDIA A MENOS DE 4 UTM. A.          DMCS\n  CLASIFICAC                LUGAR  FECHA_DEL       DIA       MES  ANO\n1   DENUNCIA          VIA PUBLICA 2017-06-16   VIERNES     JUNIO 2017\n2   DENUNCIA DOMICILIO PARTICULAR 2017-12-08   VIERNES DICIEMBRE 2017\n3   DENUNCIA DOMICILIO PARTICULAR 2017-05-07   DOMINGO      MAYO 2017\n4   DENUNCIA DOMICILIO PARTICULAR 2017-03-19   DOMINGO     MARZO 2017\n5  DETENCION          VIA PUBLICA 2017-08-23 MIERCOLES    AGOSTO 2017\n6   DENUNCIA          VIA PUBLICA 2017-11-16    JUEVES NOVIEMBRE 2017\n  HORA_DEL_D HORA24      BLOQUE      COM_GEO                          REG_GEO\n1      12:00     12 12:00-15:59       TEMUCO           REGION DE LA ARAUCANIA\n2      12:00     12 12:00-15:59       LUMACO           REGION DE LA ARAUCANIA\n3      22:00     22 20:00-23:59  LOS ANGELES                REGION DEL BIOBIO\n4      19:30     19 16:00-19:59 VINA DEL MAR             REGION DE VALPARAISO\n5      20:50     20 20:00-23:59     PUDAHUEL REGION METROPOLITANA DE SANTIAGO\n6      19:45     19 16:00-19:59 PUERTO MONTT              REGION DE LOS LAGOS\n                CATEGORIA                        GRUPO_DELI\n1    HALLAZGO DE VEHICULO             OTROS HECHOS Y FALTAS\n2 VIOLENCIA INTRAFAMILIAR           VIOLENCIA INTRAFAMILIAR\n3 VIOLENCIA INTRAFAMILIAR           VIOLENCIA INTRAFAMILIAR\n4 VIOLENCIA INTRAFAMILIAR           VIOLENCIA INTRAFAMILIAR\n5         ROBOS VIOLENTOS ROBO CON VIOLENCIA O INTIMIDACION\n6                  HURTOS                            HURTOS\n                         GRUPO_INTE ID_CLAS ID_LUGAR ID_GDELI ID_GINTE ID_GRUPO\n1                 HALLAZGO VEHICULO       1       98      500  2400000        6\n2                               VIF       1       28      200      200        7\n3                               VIF       1       28      200      200        7\n4                               VIF       1       28      200      200        7\n5 ROBO CON VIOLENCIA O INTIMIDACION       2       98      107      107        3\n6                            HURTOS       1       98      101      101        3\n  ST_REG ST_PROV ST_COM ST_ANO ID_MES ID_DIA  X_RAN   Y_RAN\n1     09     091  09101   2017      6      5 190864 5707829\n2     09     092  09207   2017     12      5 158271 5768480\n3     08     083  08301   2017      5      7 205552 5844695\n4     05     051  05109   2017      3      7 265420 6343272\n5     13     131  13124   2017      8      3 337234 6296234\n6     10     101  10101   2017     11      4 171337 5401271\n                geometry\n1 POINT (190864 5707829)\n2 POINT (158271 5768480)\n3 POINT (205552 5844695)\n4 POINT (265420 6343272)\n5 POINT (337234 6296234)\n6 POINT (171337 5401271)\n\n\nSe puede observar que corresponde a 1.418.435 de casos policiales con información espacial tipo punto (Simple Features for R), además información temporal y divisiones administrativas.\n\n1.2.1 Unificar Bases\nLas bases están separadas por año por lo tanto se ban unificar para obtener un solo archivo, lo que facilitarà hacer todas las transformaciones. Revisar las bases a unificar:\n\ndelitos_anuales <-  list.files(\"data/delitos/raw/\")\ndelitos_anuales\n\n[1] \"Casos_2017.rds\" \"Casos_2018.rds\" \"Casos_2019.rds\" \"Casos_2020.rds\"\n[5] \"Casos_2021.rds\" \"Casos_2022.rds\""
  },
  {
    "objectID": "crime_f.html#dataframe-to-sf-object",
    "href": "crime_f.html#dataframe-to-sf-object",
    "title": "Appendix A — Funciones Generales",
    "section": "A.1 Dataframe to SF Object",
    "text": "A.1 Dataframe to SF Object\n\n# dataframe a sf\ndf2sf <- function(df, lon =\"lon\", lat =\"lat\", crs_base = 4326) {\n  sf_object <- df %>%\n    dplyr::filter(!is.na(lon)|!is.na(lat)) %>%\n    sf::st_as_sf(coords = c(lon, lat),\n                 crs = crs_base, agr = \"constant\")\n  return(sf_object)\n}\n\n\n# sf to dataframe\nsf2df <- function(sf_points){\n  df <- sfheaders::sf_to_df( sf_points, fill = TRUE ) %>% \n    rename(lon = x, lat = y)\n  return(df)\n}"
  },
  {
    "objectID": "crime_f.html#imputar-datos-por-intersect",
    "href": "crime_f.html#imputar-datos-por-intersect",
    "title": "Appendix A — Funciones Generales",
    "section": "A.2 Imputar datos por intersect",
    "text": "A.2 Imputar datos por intersect\n\nadd_info_intersects <-  function(pol_info, sf_data){\n# versión eficiente de intersects\n  id_int <- sapply(st_intersects(sf_data, pol_info), \n                   function(z) if (length(z)==0) NA_integer_ else z[1])\n  \n  pol_info <- pol_info %>% \n    mutate(id = 1:nrow(.)) %>% \n    st_drop_geometry()\n  \n  resultados <- sf_data%>%\n    mutate(id = id_int) %>%\n    left_join(pol_info, by =\"id\")\n  return(resultados)\n  \n}"
  },
  {
    "objectID": "crime_f.html#tablas-resumen",
    "href": "crime_f.html#tablas-resumen",
    "title": "Appendix A — Funciones Generales",
    "section": "A.3 Tablas Resumen",
    "text": "A.3 Tablas Resumen\n\nresumen_base <- function(base, name_base, n_samples = 5){ \n  smp <- sample(nrow(base), size = n_samples, replace = F)\n  res <- NULL\n  for(i in 1:ncol(base)){\n    r <- data.frame(\n      col_name = as.character(names(base)[i]),\n      # col_name_cor =  names(janitor::clean_names(base))[i],\n      n_rows = nrow(base),\n      n_unique = length(unique(base[,i])),\n      n_NA = sum(is.na(base[,i])),\n      min = round(min(base[,i],  na.rm = T), 3),\n      max = round(max(base[,i],  na.rm = T), 3),\n      mean = round(mean(base[,i],  na.rm = T), 3),\n      sample1 = as.character(base[smp[1],i]),\n      sample2 = as.character(base[smp[2],i]),\n      sample3 = as.character(base[smp[3],i]),\n      sample4 = as.character(base[smp[4],i]),\n      sample5 = as.character(base[smp[5],i])\n    )\n    r <- r %>%\n      mutate(base_name = name_base, \n             porc_NA = round((n_NA / nrow(base)) * 100, 2),\n             col_name = gsub(pattern = \"\\\\.\", replacement = \" \", x = col_name),# puntos -> espacios\n      )%>%\n      dplyr::select(base_name, col_name,  n_rows, n_unique, n_NA, porc_NA, everything())\n    \n    res <- rbind(res, r)\n  }\n  return(res)\n  \n}"
  },
  {
    "objectID": "crime_f.html#funciones-de-uso-general",
    "href": "crime_f.html#funciones-de-uso-general",
    "title": "Appendix A — Funciones Generales",
    "section": "A.4 Funciones de uso general",
    "text": "A.4 Funciones de uso general\n\n# Si no existe directorio lo crea\nmake_dir <- function(path){\n  if (!dir.exists(path)) dir.create(path, recursive = TRUE)\n}\n\n# transformar -999 a NA\nfix_missing <- function(x) {\n  if(is.numeric(x)){\n    x[x == -999] <- NA\n    \n  }\n  return(x)\n}\n\n\n# transformar NA a 0\nfix_NA_0 <- function(x) {\n  x[is.na(x)] <- 0\n  return(x)\n}\n\n\n\n# Reeplaza puntos pomas\npto_por_coma <- function(x){\n  format(x, big.mark = \".\", decimal.mark = \",\" ,\n         scientific = FALSE)\n  \n}\n\nsimpleCap <- function(x) {\n  s <- strsplit(x, \" \")[[1]]\n  paste(toupper(substring(s, 1, 1)), substring(s, 2),\n        sep = \"\", collapse = \" \")\n}\n\nsf_toupper <-  function(sf_object){\n  names(sf_object)[1:(ncol(sf_object)-1)] <- toupper(names(sf_object)[1:(ncol(sf_object)-1)])\n  return(sf_object)\n}\n\n# función paara saber catidad de acuerdo un porcentaje\nporc_df <- function(dataframe, porcentaje){\n  if(porcentaje>100){\n    stop(\"Porcentaje NO puede ser mayor que 100\")\n  }else{\n    num <- round(nrow(dataframe)*(porcentaje/100))\n  }\n  return(num)\n}"
  },
  {
    "objectID": "crime_f.html#cuenta-duplicados-por-columna",
    "href": "crime_f.html#cuenta-duplicados-por-columna",
    "title": "Appendix A — Funciones Generales",
    "section": "A.5 Cuenta duplicados por columna",
    "text": "A.5 Cuenta duplicados por columna\n\nduplicados <- function(file, columna) {\n  if (columna == \"geometry\") {\n    col <- file %>% dplyr::select(all_of(columna))\n  } else{\n    col <-\n      file %>% st_drop_geometry() %>% dplyr::select(all_of(columna))\n  }\n  \n  d <- col %>% duplicated() %>% sum()\n  return(d)\n}"
  },
  {
    "objectID": "crime_f.html#leer-delitos-rds-por-año",
    "href": "crime_f.html#leer-delitos-rds-por-año",
    "title": "Appendix A — Funciones Generales",
    "section": "A.6 Leer delitos rds por año",
    "text": "A.6 Leer delitos rds por año\n\nread_delitos <-\n  function(path_data = \"data/delitos/delitos_base/\", year) {\n    delitos <- readRDS(paste0(path_data, \"delitos_\", year, \".rds\"))\n    return(delitos)\n  }"
  },
  {
    "objectID": "crime_f.html#función-seleccionar-muestra-n",
    "href": "crime_f.html#función-seleccionar-muestra-n",
    "title": "Appendix A — Funciones Generales",
    "section": "A.7 Función seleccionar muestra n",
    "text": "A.7 Función seleccionar muestra n\n\nmuestra_n <-  function(df, n, random = F){\n  if(isTRUE(random)){\n    x <- dplyr::slice_sample(df, n = n, replace = F)\n  }else{\n    x <- df[1:n]\n  }\n  return(x)\n}"
  },
  {
    "objectID": "crime_f.html#función-seleccionar-muestra-por-fracción",
    "href": "crime_f.html#función-seleccionar-muestra-por-fracción",
    "title": "Appendix A — Funciones Generales",
    "section": "A.8 Función seleccionar muestra por fracción",
    "text": "A.8 Función seleccionar muestra por fracción\n\nmuestra_frac <-  function(df, prop){\n    x <- dplyr::slice_sample(df, prop = prop, replace = F)\n  return(x)\n}"
  },
  {
    "objectID": "r_project.html",
    "href": "r_project.html",
    "title": "Appendix B — R Project",
    "section": "",
    "text": "C Introducción a R\nLas estructuras de control en R son herramientas que permiten controlar el flujo de ejecución de un programa. Las estructuras de control son esenciales para cualquier lenguaje de programación, ya que permiten que el programa tome decisiones y realice acciones en función de ciertas condiciones.\nEstas estructuras de control son muy útiles para crear programas que respondan a diferentes situaciones y condiciones, y permiten que los programadores puedan crear soluciones más eficientes y complejas.\nEn R, existen tres estructuras de control principales:"
  },
  {
    "objectID": "r_project.html#qué-es-r-project",
    "href": "r_project.html#qué-es-r-project",
    "title": "Appendix B — R Project",
    "section": "C.1 ¿Qué es R Project?",
    "text": "C.1 ¿Qué es R Project?\nR es un lenguaje programación multiparadigma (procedural, imperativo, orientado a objetos y funcional) enfocado a aplicaciones estadísticas. Por estadísticas se debe entender también los campos de estudio que se basan o las utilizan como económía, finanzas, ciencia de datos, machine learning, etc.\n\nC.1.1 Ventajas de Utilizar R Project\n1. R es un software libre\n\nLa libertad de ejecutar el programa como desee y con cualquier propósito\nEstudiar el funcionamiento del programa y adaptarlo a sus necesidades.\nRescribir copias para ayudar a los demás.\nManejar el programa y publicar las mejorar, de manera que toda comunidad se beneficie.\n\n2. R es multiplataforma\n\nR funciona en Mac, Windows y en numerosos sistemas UNIX. Esto significa que cualquier persona puede trabajar con tus datos, figuras, análisis y más importante aún usar tus instrucciones (también conocido como scripts o código) para generar las figuras y el análisis. Así que cualquier persona, y en cualquier lugar del mundo, con acceso a cualquier SO puede usar R sin ninguna licencia.\n\n3. R es de código abierto\n\nExiste una gran comunidad de voluntarios trabajando para mejorarlo, lo cual permite ser moldeado y dirigido a cuestiones específicas. Creando así programas y paquetes que funcionen en el entorno R. Programas tales como R-studio, Java GUI for R, R- commander, RKWard, entre otros, y con más de 18000 paquetes indexado en CRAN, Biocoductor, GitHub y R-Forge.\n\n4. Todo dentro de un mismo entorno\n\nR remplaza la combinación de varios programas para el proceso de análisis de datos, por ejemplo Excel, ArcGis, QGis, SigmaPlot, entre otros. Esto no solo resulta en el alto costo de las licencias de múltiples programas, si no también, en la gran cantidad de archivos con diferentes formatos que no podrían leer otros programas. En cambio con solo utilizar R, puedes realizar todo el análisis de datos e inclusive leer archivos de diferentes formatos.\n\n\n\nC.1.2 Desventajas de utilizar R\n\nR tiene una vasta documentación de ayuda, descripción de paquetes y de funciones, que es difícil encontrar información específica en un momento dado.\nLos mensajes de error que R nos muestra, no es específica sobre los fallos que estamos realizando y solo un usuario con cierta experiencia en el uso de R puede saberlo."
  },
  {
    "objectID": "r_project.html#instalación-de-r-project",
    "href": "r_project.html#instalación-de-r-project",
    "title": "Appendix B — R Project",
    "section": "C.2 Instalación de R Project",
    "text": "C.2 Instalación de R Project\n\nC.2.1 Instalación de R Project\nPrimero se debe instalar R Project desde su sitio oficial (https://cran.r-project.org/bin/windows/base/), se ejecuta el instalador que se descargó depende del sistema operativo del PC, como se muestra en las siguientes figuras:\n\n\n\nC.2.2 Instalación de R para Windows\n\n\n\n\n\nC.2.3 Instalar Rtools (solo Sistema Operativo Windows)\n\n\n\n\n\n\n\n\nC.2.4 Instalación de R para Mac\n\n\n\nR Project Ejecutándose"
  },
  {
    "objectID": "r_project.html#instalación-de-rstudio",
    "href": "r_project.html#instalación-de-rstudio",
    "title": "Appendix B — R Project",
    "section": "C.3 Instalación de RStudio",
    "text": "C.3 Instalación de RStudio\nSe recomienta instalar Rstudio, que es Interfaz de Usuario de R Project, desde su sitio web oficial, el cual permite acceder con mayor facilidad a sus funciones y potencialidades de R.\n\n\n\n\n\n\n\n\n\nC.3.1 RStudio Cloud\nRStudio Cloud es una versión ligera del IDE RStudio alojada en la la nube que permite a cualquiera hacer, compartir, enseñar y aprender Ciencias de Datos Online. Tiene una versión gratuita limitada.\n\nC.3.1.1 Características:\n\nAnalyze your data using the RStudio IDE, directly from your browser.\nShare projects with your team, class, workshop or the world.\nTeach data science with R to your students or colleagues.\nLearn data science in an instructor-led environment or with interactive tutorials."
  },
  {
    "objectID": "r_project.html#instalar-librerías",
    "href": "r_project.html#instalar-librerías",
    "title": "Appendix B — R Project",
    "section": "C.4 Instalar Librerías",
    "text": "C.4 Instalar Librerías\n\nC.4.1 Librerías en R\nLas librerías o paquetes en R corresponden a una colección de funciones encapsuladas y diseñadas para atender una tarea específica. Por ejemplo, hay paquetes para trabajo visualización geoespacial, análisis psicométricos, mineria de datos, interacción con servicios de internet y muchas otras cosas más.\nEstos paquetes se encuentran alojados principalmente en CRAN (Comprehensive R Archive Network), así que pasan por un control riguroso antes de estar disponibles para su uso generalizado, al día de hoy (29.11.2021) existen 18498 paquetes disponibles. En el siguiente enlace se deja una lista de temas y sus librerías asociadas disponibles, con una breve descripción (enlace)\nAunque las versiones de prueba de una librería pueden estar disponible en Github (Respositorio de Control de Versiones) de cada autor.\n\n\nC.4.2 Ejemplo de Instalación de Librerías desde R\nPodemos instalar paquetes usando la función install.packages(), dando como argumento el nombre del paquete que deseamos instalar, entre comillas.\nPara instalar librerías se puede hacer directamente desde la consola de RStudio, por ejemplo:\n\ninstall.packages(\"dplyr\") # Se puede instalar más de una librería a la vez\n\n\n\nC.4.3 Ejemplo de Instalación de Librerías desde Rstudio\nTambién se pude instalar librerías del Panel “Packages”\n\n\n\nY por último se puede instalar desde Pestaña “Tools” -> “Install Packages”:"
  },
  {
    "objectID": "r_project.html#definición-de-directorios-de-trabajos",
    "href": "r_project.html#definición-de-directorios-de-trabajos",
    "title": "Appendix B — R Project",
    "section": "C.5 Definición de Directorios de Trabajos",
    "text": "C.5 Definición de Directorios de Trabajos\nDefinir directorio de Trabajo con RStudio\n\n\n\n\n\n\nDefinir Directorio de Trabajo con una función\n\nsetwd(\"~/OneDrive - Universidad Adolfo Ibanez/FONDECYT/capacitacion_SPD\")\n\nConsultar Directorio de Trabajo\n\ngetwd()\n\n[1] \"/Users/denisberroeta/Library/CloudStorage/OneDrive-UniversidadAdolfoIbanez/FONDECYT/capacitacion_SPD\""
  },
  {
    "objectID": "r_project.html#tipos-de-objetos-en-r",
    "href": "r_project.html#tipos-de-objetos-en-r",
    "title": "Appendix B — R Project",
    "section": "D.1 Tipos de Objetos en R",
    "text": "D.1 Tipos de Objetos en R\nLos Datos en R se pueden clasificar por su dimensiones y los tipos de Datos que permiten almacenar, como se muestra en la siguiente tabla:\n\n\n\nDimensiones\nHomogéneos\nHeterogéneos\n\n\n\n\n1d\nAtomic vector\nList\n\n\n2d\nMatrix\nData frame\n\n\nnd\nArray\n\n\n\n\nFuente: http://adv-r.had.co.nz/Data-structures.html\nR nos permite definir variables que pueden ser luego usadas en las distintas operaciones. El lenguaje no solo permite definir escalares (variable de un numero), si no también variables que sean un conjunto de numero o caracteres ordenados.\n\nD.1.1 Variables Numéricas\n\n# La asignación en R son válidos 2 métodos '<-' o '='\nx <- 7 # Definir variable (escalar) x que sea igual a 7\nx # Mostrar que es x\n\n[1] 7\n\ny <- 3 + 2 * x # Crear y como funcion de x \ny\n\n[1] 17\n\nclass(y)\n\n[1] \"numeric\"\n\n\nNúmeros Random con decimales\n\nru <- runif(n = 100, min = 1, max = 10)\nru\n\n  [1] 8.811635 5.865857 7.391644 6.067594 8.743696 2.647396 4.774295 5.429959\n  [9] 2.377287 9.616988 6.926653 5.797022 6.847562 4.887095 2.296216 5.664446\n [17] 3.693184 1.481783 1.782443 4.875136 4.071239 7.915234 5.359341 7.759767\n [25] 2.491318 3.968461 1.539798 3.454462 9.794368 5.666611 6.746138 7.188359\n [33] 1.009968 5.630455 4.734392 6.478983 9.304819 1.250389 4.830220 7.835755\n [41] 4.578957 8.292712 7.661948 3.560957 4.669029 5.583798 9.164878 8.117981\n [49] 4.156663 6.518603 8.165289 5.485007 7.260296 6.108508 5.710161 7.110792\n [57] 4.972461 5.511515 4.167841 4.565459 8.803359 1.824712 7.328237 7.449306\n [65] 2.143007 5.991730 5.987725 2.529145 2.906488 3.289845 5.300402 3.542934\n [73] 9.636725 3.800062 5.258058 8.530075 5.807219 1.750988 8.122528 6.306378\n [81] 9.309585 9.962509 3.290576 6.283876 7.987018 9.639122 1.919056 4.855011\n [89] 7.955667 9.883614 4.880729 9.768686 7.781624 4.147312 6.825776 7.554872\n [97] 4.043835 1.530621 3.836080 3.219795\n\n\n\nhist(ru, breaks = 20, col = \"orange\", border = \"gray60\", \n     main = \"Histograma de valores Random\")\n\n\n\n\n\n\n\n\nNúmeros Random Enteros\nSimular los lanzamientos de un dado\n\nsample.int(n = 6, size = 10, replace = T)\n\n [1] 5 2 3 5 6 5 5 4 5 5\n\n\n\n\nD.1.2 Variables de Caracter\n\nch <- \"Chile\" # Definir variable (objeto) ch que sea la palabra \"Chile\"\nsn <- \"Santiago\"\nch # Mostrar ch\n\n[1] \"Chile\"\n\nsn\n\n[1] \"Santiago\"\n\n\nUnir variables de texto con paste()\n\nch <- \"Chile\" # Definir variable (objeto) ch que sea la palabra \"Chile\"\nsn <- \"Santiago\"\nunion <- paste(sn,ch, sep = \", \")\nunion\n\n[1] \"Santiago, Chile\"\n\n\nUtilizar paste0()\n\nunion <- paste(\"Provincia de \", sn,ch, sep = \", \")\nunion\n\n[1] \"Provincia de , Santiago, Chile\"\n\nunion0 <- paste0(\"Provincia de \", sn, \", \", ch)\nunion0\n\n[1] \"Provincia de Santiago, Chile\"\n\n\nBuscar y reemplazar con gsub\n\nav <- \"Av. Apoquindo\"\ncomuna <- \"comuna de Las Condes\"\ncalle <- paste(av, comuna, union0, sep = \", \")\ncalle\n\n[1] \"Av. Apoquindo, comuna de Las Condes, Provincia de Santiago, Chile\"\n\n# reemplazar Av. por Avenida\ncalle_new <- gsub(pattern = \"Av.\", replacement = \"Avenida\", x = calle)\ncalle_new\n\n[1] \"Avenida Apoquindo, comuna de Las Condes, Provincia de Santiago, Chile\""
  },
  {
    "objectID": "r_project.html#estructuras-de-datos",
    "href": "r_project.html#estructuras-de-datos",
    "title": "Appendix B — R Project",
    "section": "D.2 Estructuras de Datos",
    "text": "D.2 Estructuras de Datos\nLas variables pueden ser un conjunto de números y caracteres ordenados de varias maneras. El orden que se les da depende de lo que queremos lograr con estos.\n\nVector\nMatrices\nDataframes\nFactores\nListas\n\n\nD.2.1 Vectores\nVector Cadenas unidimensionales (es decir una sola columna o fila) de un tipo único de valores (numéricos, caracteres, etc.)\n\nvec <-  c(4, 3, 1, 5, 8, 16)\nvec\n\n[1]  4  3  1  5  8 16\n\nclass(vec)\n\n[1] \"numeric\"\n\nstr(vec)\n\n num [1:6] 4 3 1 5 8 16\n\n\nPodemos seleccionar parte del vector:\n\n# EL primer índice en R es 1 (en otros lenguajes de programación es 0)\nvec[3]\n\n[1] 1\n\n\nLa selección también puede ser hecha con una condición, de tal manera que solo seleccione aquella parte del vector que cumple con la condición.\nMayor a:\n\nvec[vec >= 4]\n\n[1]  4  5  8 16\n\n\nContenido en:\n\nvec[vec %in% c(3, 8, 7, 29)]\n\n[1] 3 8\n\n\nNegación de la condición:\n\nvec[!vec <= 3]\n\n[1]  4  5  8 16\n\n\nTambién podemos realizar operaciones matemáticas simples aplicadas al vector, por ejemplo una suma:\n\nvec2  <-  c(7, 10, 1)\nvec + vec2\n\n[1] 11 13  2 12 18 17\n\n\n\n\nD.2.2 Listas\nSon estructuras eficientes y flexibles, que permiten combinar distintas clases de elementos :\n\nlista <-  list(1, 2, 3, \"cosa\", x, y)\nlista\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3\n\n[[4]]\n[1] \"cosa\"\n\n[[5]]\n[1] 7\n\n[[6]]\n[1] 17\n\nstr(lista)\n\nList of 6\n $ : num 1\n $ : num 2\n $ : num 3\n $ : chr \"cosa\"\n $ : num 7\n $ : num 17\n\n\n\n#Tambien se puede seleccionar parte de una lista, usando el doble corchete:\nlista[[3]]\n\n[1] 3\n\n\nComo inspeccionar una lista con Rstudio\n\n\n\n\n\nD.2.3 Matrices\nSon estructuras de datos con 2 dimensiones, horizontal y la vertical (filas y columnas). Podemos construirlas usando la función “matrix”, con un vector inicial y sus dimensiones:\n\nn <- matrix(c(1.3, 2.8, 3.5, 6.4, 5.3, 6.2, 7, 4.5, 2.4, 6.3, 5.6, 5.3, 6.6, 7, 4.3),\n  nrow = 5, ncol = 3, byrow = TRUE)\nn\n\n     [,1] [,2] [,3]\n[1,]  1.3  2.8  3.5\n[2,]  6.4  5.3  6.2\n[3,]  7.0  4.5  2.4\n[4,]  6.3  5.6  5.3\n[5,]  6.6  7.0  4.3\n\n\nLa matriz tiene 2 dimensiones, por lo que para seleccionar partes de ella es necesario declarar dos dimensiones separadas por una coma. A la izquierda van las filas y a la derecha las columnas. Un valor vacío indica que se seleccionan todos los valores posibles.\n\nn[1,2]\n\n[1] 2.8\n\n\n\nn[,3]\n\n[1] 3.5 6.2 2.4 5.3 4.3\n\n\n\n\nD.2.4 Dataframes\nEstructura mas clásica de datos, es una matriz pero con mas atributos como nombres de columna y/o fila. Es lo mas similar en R a una tabla excel o la tabla de atributos. La manera mas simple de crear un dataframe es a partir de una matriz usando la función as.data.frame() :\n\ndf<- as.data.frame(n)\ndf\n\n   V1  V2  V3\n1 1.3 2.8 3.5\n2 6.4 5.3 6.2\n3 7.0 4.5 2.4\n4 6.3 5.6 5.3\n5 6.6 7.0 4.3\n\n\nPodemos asignar nombres a las columnas del dataframe\n\nnames(df)<- c(\"control_1\",\"control_2\",\"examen\")\ndf\n\n  control_1 control_2 examen\n1       1.3       2.8    3.5\n2       6.4       5.3    6.2\n3       7.0       4.5    2.4\n4       6.3       5.6    5.3\n5       6.6       7.0    4.3\n\n\nY a las filas del dataframe\n\ndf$alumno <- c(\"Sofia\",\"Tomas\",\"Luciano\",\"Julian\",\"Gabriela\")\ndf\n\n  control_1 control_2 examen   alumno\n1       1.3       2.8    3.5    Sofia\n2       6.4       5.3    6.2    Tomas\n3       7.0       4.5    2.4  Luciano\n4       6.3       5.6    5.3   Julian\n5       6.6       7.0    4.3 Gabriela\n\n\nTambién podemos realizar operaciones entre vectores del dataframe:\n\ndf$promedio_final <-  0.3*df$control_1 + 0.3*df$control_2 + 0.4*df$examen\ndf\n\n  control_1 control_2 examen   alumno promedio_final\n1       1.3       2.8    3.5    Sofia           2.63\n2       6.4       5.3    6.2    Tomas           5.99\n3       7.0       4.5    2.4  Luciano           4.41\n4       6.3       5.6    5.3   Julian           5.69\n5       6.6       7.0    4.3 Gabriela           5.80"
  },
  {
    "objectID": "r_project.html#operaciones-básicas-en-r",
    "href": "r_project.html#operaciones-básicas-en-r",
    "title": "Appendix B — R Project",
    "section": "E.1 Operaciones Básicas en R",
    "text": "E.1 Operaciones Básicas en R\n\nE.1.1 Operaciones Matemáticas\nEn R, es posible realizar operaciones matemáticas básicas utilizando los operadores aritméticos estándar. Estos operadores incluyen:\n\nSuma (+): se utiliza para sumar dos valores.\nResta (-): se utiliza para restar un valor de otro.\nMultiplicación (*): se utiliza para multiplicar dos valores.\nDivisión (/): se utiliza para dividir un valor por otro.\nExponenciación (^): se utiliza para elevar un valor a una potencia.\nMódulo (%%): se utiliza para encontrar el resto de la división de un valor por otro.\n\nEstos operadores se pueden utilizar con números enteros, decimales y variables numéricas. Además, también se pueden utilizar paréntesis para especificar el orden de las operaciones.\nA continuación, se presentan algunos ejemplos de operaciones matemáticas básicas en R:\n\n# Suma\n2 + 3 # resultado: 5\n\n[1] 5\n\n# Resta\n5 - 2 # resultado: 3\n\n[1] 3\n\n# Multiplicación\n2 * 4 # resultado: 8\n\n[1] 8\n\n# División\n10 / 2 # resultado: 5\n\n[1] 5\n\n# Exponenciación\n2^3 # resultado: 8\n\n[1] 8\n\n# Módulo\n15 %% 4 # resultado: 3\n\n[1] 3\n\n# Utilizando paréntesis para especificar el orden de las operaciones\n(2 + 3) * 4 # resultado: 20\n\n[1] 20\n\n\nEs importante tener en cuenta que R sigue las reglas de precedencia de las operaciones matemáticas. Esto significa que las operaciones dentro de los paréntesis se evalúan primero, seguidas de la exponenciación, la multiplicación y la división, y finalmente la suma y la resta. Si se requiere un orden específico de operaciones, se deben utilizar paréntesis para indicarlo.\nAdemás, R también cuenta con una variedad de funciones matemáticas incorporadas, como “sin”, “cos”, “tan”, “log”, “exp”, entre otras, que se pueden utilizar para realizar operaciones más complejas.\nTambién se pueden aplica a un elemento a al objeto espacial completo\n\na <- 13\nb <- c(20,30,22,2,1)\n\nsum(b) # suma\n\n[1] 75\n\nsqrt(b) # find the square root of x\n\n[1] 4.472136 5.477226 4.690416 1.414214 1.000000\n\n\n\nmean(b)\n\n[1] 15\n\nmin(b)\n\n[1] 1\n\nmax(b)\n\n[1] 30\n\n\n\n\nE.1.2 Funciones Útiles de propósito general\n\nrep(1, 10)\n\n [1] 1 1 1 1 1 1 1 1 1 1\n\nrep(\"HAHA\", 10)\n\n [1] \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\" \"HAHA\"\n\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(1, 10, by = 2)\n\n[1] 1 3 5 7 9\n\nifelse(3 > 5, 1, \"this is false\")\n\n[1] \"this is false\"\n\n\n\npaste(\"Hola\", \"amigo\")\n\n[1] \"Hola amigo\"\n\npaste(\"Hello\", \"amigo\", sep = \"--\")\n\n[1] \"Hello--amigo\"\n\npaste0(\"Hello\", \"amigo\")\n\n[1] \"Helloamigo\"\n\ntolower(\"HAHAHAHAH\")\n\n[1] \"hahahahah\"\n\ntoupper(\"hueuehuehuheuhe\")\n\n[1] \"HUEUEHUEHUHEUHE\""
  },
  {
    "objectID": "r_project.html#operaciones-lógicas",
    "href": "r_project.html#operaciones-lógicas",
    "title": "Appendix B — R Project",
    "section": "E.2 Operaciones Lógicas",
    "text": "E.2 Operaciones Lógicas\nEn R, los operadores lógicos se utilizan para realizar comparaciones lógicas entre valores o expresiones. Estos operadores devuelven valores booleanos (TRUE o FALSE) según se cumpla o no la condición.\nA continuación se presentan los operadores lógicos en R:\n\n\n\n\n \n  \n    Operador \n    Significado \n    Ejemplo \n  \n \n\n  \n    == \n    Igual a \n    2 == 2 (TRUE) \n  \n  \n    != \n    Diferente a \n    2 != 3 (TRUE) \n  \n  \n    > \n    Mayor que \n    3 > 2 (TRUE) \n  \n  \n    < \n    Menor que \n    2 < 3 (TRUE) \n  \n  \n    >= \n    Mayor o igual que \n    3 >= 2 (TRUE) \n  \n  \n    <= \n    Menor o igual que \n    2 <= 3 (TRUE) \n  \n  \n    & \n    Operador lógico AND \n    2 < 3 & 3 > 1 (TRUE) \n  \n  \n    | \n    Operador lógico OR \n    2 < 3 | 3 < 1 (TRUE) \n  \n  \n    ! \n    Operador lógico NOT \n    !(2 == 3) (TRUE) \n  \n\n\n\n\n\n\nE.2.1 Operador de igualdad: (==)\nEste operador se utiliza para comparar si dos valores son iguales. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\na == b # FALSE\n\n[1] FALSE\n\n\n\n\nE.2.2 Operador de desigualdad: (!=)\nEste operador se utiliza para comparar si dos valores son diferentes. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\na != b # TRUE\n\n[1] TRUE\n\n\n\n\nE.2.3 Operador de mayor que: (>)\nEste operador se utiliza para comparar si un valor es mayor que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\nb > a # TRUE\n\n[1] TRUE\n\n\n\n\nE.2.4 Operador de menor que: (<)\nEste operador se utiliza para comparar si un valor es menor que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\na < b # TRUE\n\n[1] TRUE\n\n\n\n\nE.2.5 Operador de mayor o igual que: (>=)\nEste operador se utiliza para comparar si un valor es mayor o igual que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\nb >= a # TRUE\n\n[1] TRUE\n\n\n\n\nE.2.6 Operador de menor o igual que: (<=)\nEste operador se utiliza para comparar si un valor es menor o igual que otro. Retorna TRUE si la condición se cumple y FALSE en caso contrario.\n\na <- 2\nb <- 3\na <= b # TRUE\n\n[1] TRUE\n\n\n\n\nE.2.7 Operador lógico AND: (&)\nEste operador se utiliza para evaluar dos o más condiciones y retornar TRUE si todas se cumplen, de lo contrario retorna FALSE.\n\na <- 2\nb <- 3\nc <- 4\na < b & b < c # TRUE\n\n[1] TRUE\n\n\n\n\nE.2.8 Operador lógico OR: (|)\nEste operador se utiliza para evaluar dos o más condiciones y retornar TRUE si al menos una se cumple, de lo contrario retorna FALSE.\n\na <- 2\nb <- 3\nc <- 4\na > b | b < c # TRUE\n\n[1] TRUE\n\n\nOperador lógico NOT: (!) Este operador se utiliza para negar una condición. Si la condición es TRUE, retorna FALSE, y si la condición es FALSE, retorna TRUE.\n\na <- 2\nb <- 3\n!(a == b) # TRUE\n\n[1] TRUE\n\n\nEs importante tener en cuenta que los operadores lógicos se pueden utilizar en combinación para crear expresiones lógicas más complejas. Además, los operadores lógicos también se pueden utilizar en las estructuras de control condicionales, como if/else y switch, para tomar decisiones basadas en condiciones lógicas."
  },
  {
    "objectID": "r_project.html#crear-funciones-propias",
    "href": "r_project.html#crear-funciones-propias",
    "title": "Appendix B — R Project",
    "section": "E.3 Crear Funciones Propias",
    "text": "E.3 Crear Funciones Propias\nEn R, es posible crear funciones propias para realizar tareas específicas y reutilizarlas en diferentes partes de un programa. Para crear una función en R, se utiliza la siguiente estructura:\n\nnombre_de_la_funcion <- function(argumentos) {\n  cuerpo_de_la_funcion\n}\n\nPor ejemplo, se puede crear una función que calcule la suma de dos números:\n\nsuma <- function(a, b) {\n  resultado <- a + b\n  return(resultado)\n}\n\nresultado_suma <- suma(2, 3)\nprint(resultado_suma) # 5\n\n[1] 5\n\n\nPor ejemplo, se puede crear una función que eleve al cuadrado:\n\ncuadrado <- function(x) { # x = parámetro\n    y = x ^ 2 # asiganción de variables solo dentro de la función\n    return(y) # especificar valor retornado (no necesario completamente)\n}\n\n\na <- 13\nb <- c(20,30,22,2,1)\ncuadrado(a)\n\n[1] 169\n\ncuadrado(b)\n\n[1] 400 900 484   4   1\n\n\nEs importante tener en cuenta que los nombres de las funciones en R deben cumplir las mismas reglas que los nombres de las variables. Además, es recomendable incluir comentarios explicativos dentro del cuerpo de la función para facilitar su comprensión y uso posterior.\nActividad:\nActividad: Crear una función que calcule la hipotenusa de un triángulo rectángulo (Teorema de Pitágoras):\n\n\n\nEstablece que el cuadrado de la longitud de la hipotenusa es igual a la suma de los cuadrados de las longitudes de los catetos.\nc^2 = {a^2}+{b^2}\nPor lo cual:\nc = \\sqrt{{a^2}+{b^2}}\n\n\n\n\n\n\nAyuda\n\n\n\n\nhipotenusa <- function(a, b){\n  #h <-     # En esta parte escribir la función\n  return(h)\n}\nr1 <-  hipotenusa(a = 5,  b = 5)\n\n\n\nEncontrar la Hipotenusa de:\nh=?, a = 10, b = 6\nh=?, a = 5, b = 4\nh=?, a = 3, b = 4"
  },
  {
    "objectID": "r_project.html#estructuras-condicionales",
    "href": "r_project.html#estructuras-condicionales",
    "title": "Appendix B — R Project",
    "section": "F.1 Estructuras condicionales",
    "text": "F.1 Estructuras condicionales\nLas estructuras condicionales son una de las tres estructuras de control principales en R. Estas estructuras permiten ejecutar un bloque de código solo si se cumple una condición determinada.\nLa estructura condicional más común en R es “if”. La sintaxis básica de la estructura “if” es la siguiente:\n\nif(Condición) {\n  operaciones_si_la_condición_es_TRUE\n}\n\nLa “condición” es una expresión lógica que evalúa a verdadero o falso. Si la condición es verdadera, el bloque de código dentro del “if” se ejecutará. Si la condición es falsa, el bloque de código dentro del “if” se ignorará.\nPor ejemplo, le pedimos a R que nos muestre el texto “Verdadero” si la condición se cumple.\n\n# Se cumple la condición y se muestra \"verdadero\"\nif(4 > 3) {\n  \"Verdadero\"\n}\n\n[1] \"Verdadero\"\n\n\n\n# No se cumple la condición y no pasa nada\nif(4 > 5) {\n  \"Verdadero\"\n}\n\nTambién se puede agregar un bloque de código opcional para el caso en que la condición sea falsa utilizando la estructura “else”. La sintaxis básica de la estructura “if” con “else” es la siguie\nSI esta condición es es cierta, ENTONCES haz estas operaciones, DE OTRO MODO haz estas otras operaciones.\n\nif(condición) {\n  operaciones_si_la_condición_es_TRUE\n} else {\n  operaciones_si_la_condición_es_FALSE\n}\n\nUsando los ejemplos anteriores, podemos mostrar “Falso” si no se cumple la condición, en lugar de que no ocurra nada\n\n# Se cumple la condición y se muestra \"Verdadero\"\nif(4 > 3) {\n  \"Verdadero\"\n} else {\n  \"Falso\"\n}\n\n[1] \"Verdadero\"\n\n\nLa estructura “ifelse” es otra forma de estructura condicional que permite ejecutar diferentes bloques de código en función de la condición. La sintaxis básica de la estructura “ifelse” es la siguiente:\n\nifelse(condición, expresión1, expresión2)\n\nSi la “condición” es verdadera, se ejecutará “expresión1”. Si la “condición” es falsa, se ejecutará “expresión2”.\nAdemás, se pueden anidar varias estructuras condicionales utilizando la sintaxis de “if” y “else”. Por ejemplo:\n\nif (condición1) {\n  # Código a ejecutar si la condición1 es verdadera\n} else if (condición2) {\n  # Código a ejecutar si la condición1 es falsa y la condición2 es verdadera\n} else {\n  # Código a ejecutar si todas las condiciones son falsas\n}\n\nEn resumen, las estructuras condicionales en R son herramientas muy útiles para controlar el flujo de ejecución de un programa en función de ciertas condiciones. Estas estructuras permiten crear soluciones más eficientes y complejas al permitir que los programas tomen decisiones y realicen acciones en función de las condiciones que se presenten."
  },
  {
    "objectID": "r_project.html#estructuras-de-bucles",
    "href": "r_project.html#estructuras-de-bucles",
    "title": "Appendix B — R Project",
    "section": "F.2 Estructuras de bucles",
    "text": "F.2 Estructuras de bucles\nLas estructuras de bucles son una de las tres estructuras de control principales en R. Estas estructuras permiten ejecutar un bloque de código repetidamente mientras se cumpla una condición determinada. En R, existen tres estructuras de bucles principales: “while”, “for” y “repeat”.\nBeneficios\n\nEs más fácil ver el objetivo de tu código; lo diferente llama más atención a la vista que aquello que permanece igual.\nEs más sencillo responder a cambios en los requerimientos. A medida que tus necesidades cambian, solo necesitarás realizar cambios en un lugar, en vez de recordar cambiar en cada lugar donde copiaste y pegaste el código.\nEs probable que tengas menos errores porque cada línea de código es utilizada en más lugares.\n\n\nF.2.1 Estructura de bucle “for”:\nLa estructura “for” permite repetir la ejecución de un bloque de código un número determinado de veces. La sintaxis básica de la estructura “for” es la siguiente:\n\nfor (variable in secuencia) {\n  # Código a ejecutar para cada elemento en la secuencia\n}\n\nLa “secuencia” es un objeto que contiene una serie de elementos. La “variable” toma el valor de cada elemento de la secuencia en cada iteración del bucle. En cada iteración, se ejecutará el bloque de código dentro del “for” para ese valor de la variable.\nEjemplo simple: print una secuencia\n\nfor (i in 1:5){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nEjemplo 2: Guardando los resultados en un vector\n\ndado <- 1:6\nmi_vector <- NULL\nfor(cara in dado) {\n  mi_vector[cara] <- cara ^ 2\n}\nmi_vector\n\n[1]  1  4  9 16 25 36\n\n\nEjemplo 3: Loops con vectores\n\nalumnos <- c(\"Carmen\", \"Adriana\", \"Marco\", \"Fabi\", \"Brenda\")\n\nfor(i in 1:length(alumnos)) {\n  print(paste(\"Hola,\", alumnos[i], sep = \" \"))\n}\n\n[1] \"Hola, Carmen\"\n[1] \"Hola, Adriana\"\n[1] \"Hola, Marco\"\n[1] \"Hola, Fabi\"\n[1] \"Hola, Brenda\"\n\n\nEjemplo 4: loops en Dataframes\n\ndf <- data.frame(a = rnorm(10), b = rnorm(10),\n                 c = rnorm(10), d = rnorm(10))\n\nfor(i in 1:ncol(df)){\n  promedio = mean(df[,i])\n  print(promedio)\n}\n\n[1] 0.04650901\n[1] 0.145887\n[1] 0.2658215\n[1] 0.1797405\n\n\n\n\nF.2.2 Estructura de bucle “while”:\nLa estructura “while” permite repetir la ejecución de un bloque de código mientras se cumpla una condición determinada. La sintaxis básica de la estructura “while” es la siguiente:\n\nwhile (condición) {\n  # Código a ejecutar mientras se cumpla la condición\n}\n\nLa “condición” es una expresión lógica que evalúa a verdadero o falso. Si la condición es verdadera, se ejecutará el bloque de código dentro del “while”. Este proceso se repetirá hasta que la condición sea falsa.\n\n\nF.2.3 Estructura de bucle “repeat”:\n\nrepeat {\n  # Código a ejecutar de manera indefinida\n  if (condición) {\n    break\n  }\n}\n\nEl bloque de código dentro del “repeat” se ejecutará de manera indefinida hasta que se encuentre la sentencia “break”, que permite salir del bucle. La “condición” es una expresión lógica que evalúa a verdadero o falso. Si la condición es verdadera, se ejecutará la sentencia “break” y se saldrá del bucle."
  },
  {
    "objectID": "r_project.html#estructuras-de-control-de-flujo",
    "href": "r_project.html#estructuras-de-control-de-flujo",
    "title": "Appendix B — R Project",
    "section": "F.3 Estructuras de control de flujo",
    "text": "F.3 Estructuras de control de flujo\n“next” y “break” son palabras clave importantes en R que se utilizan en las estructuras de control de flujo, específicamente en las estructuras de bucle. “next” se utiliza para saltar a la siguiente iteración del bucle sin ejecutar el resto del código dentro del bucle, mientras que “break” se utiliza para detener el bucle de forma abrupta, incluso si la condición del bucle todavía se cumple.\n\nF.3.1 Estructuras de control “next”:\n“next” se utiliza en una estructura de bucle para saltar a la siguiente iteración del bucle sin ejecutar el resto del código dentro del bucle. Es decir, si se encuentra la palabra clave “next” dentro de un bucle, se omitirá el código que viene después y el bucle pasará inmediatamente a la siguiente iteración. La palabra clave “next” es útil cuando se desea saltar una iteración específica del bucle, sin afectar el resto del código.\nPor ejemplo, en el siguiente código se utiliza la palabra clave “next” para omitir la impresión del número 3 dentro del bucle “for”:\n\nfor (i in 1:5) {\n  if (i == 3) {\n    next\n  }\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 4\n[1] 5\n\n\n\n\nF.3.2 Estructuras de control “break”:\n“break”, por otro lado, se utiliza en una estructura de bucle para detener el bucle de forma abrupta, incluso si la condición del bucle todavía se cumple. Es decir, si se encuentra la palabra clave “break” dentro de un bucle, se detendrá el bucle de inmediato y se continuará con la ejecución del código que viene después del bucle. La palabra clave “break” es útil cuando se desea detener el bucle en un punto específico sin tener que esperar a que la condición del bucle se deje de cumplir.\nPor ejemplo, en el siguiente código se utiliza la palabra clave “break” para detener el bucle “while” cuando el valor de “i” es mayor que 5:\n\ni <- 1\nwhile (i < 10) {\n  if (i > 5) {\n    break\n  }\n  print(i)\n  i <- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5"
  },
  {
    "objectID": "r_project.html#introducción-a-tidyverse",
    "href": "r_project.html#introducción-a-tidyverse",
    "title": "Appendix B — R Project",
    "section": "G.1 Introducción a Tidyverse",
    "text": "G.1 Introducción a Tidyverse\nTidyverse es una colección de paquetes diseñados para Ciencia de Datos.\n\n\n\n\n\n\n# instalación\ninstall.packages(\"tidyverse\")\n\nTodos los paquetes comparten una filosofía de diseño, una gramática y estructuras de datos.\nEsta filosofía promueve\n\nEn Pipes, navegarás dentro del pipe, %>%, para anidar instrucciones\nSi bien copiar-y-pegar (copy-and-paste) es una herramienta poderosa, deberías evitar utilizarla más de dos veces. Repetir el código es peligroso porque puede llevar a errores e inconsistencias.\nA medida que comiences a escribir funciones más potentes, necesitarás una base sólida acerca de las estructuras de datos.\nLas funciones nos permiten evitar la repetición de código; sin embargo, muchas veces necesitas repertir las mismas acciones con diferentes inputs. Puedes hacer esto con herramientas de iteración."
  },
  {
    "objectID": "r_project.html#estructura-de-un-dataframe",
    "href": "r_project.html#estructura-de-un-dataframe",
    "title": "Appendix B — R Project",
    "section": "G.2 Estructura de un dataframe",
    "text": "G.2 Estructura de un dataframe\n\n\n\nLectura de Base de SII\n\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(sf))\ntbl_sii  <- readRDS(\"data/rds/mz_constru_SII.rds\") %>% \n  st_drop_geometry() # descartar geometrias solo usar la tabla de datos\n\nhead(tbl_sii)\n\n# A tibble: 6 × 10\n  n_com   manzana   reg cod_com num_manz oficinas comercio vivienda total   AREA\n  <chr>   <chr>   <dbl>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl> <dbl>  <dbl>\n1 IQUIQUE 1201-0      1    1201        0        0        0        0     0   585.\n2 IQUIQUE 1201-0      1    1201        0        0        0        0     0 17291.\n3 ALTO H… 1211-0      1    1211        0        0        0        0     0  1859.\n4 ALTO H… 1211-0      1    1211        0        0        0        0     0   442.\n5 ALTO H… 1211-0      1    1211        0        0        0        0     0   205.\n6 ALTO H… 1211-0      1    1211        0        0        0        0     0  1200."
  },
  {
    "objectID": "r_project.html#funciones-básicas-dplyr",
    "href": "r_project.html#funciones-básicas-dplyr",
    "title": "Appendix B — R Project",
    "section": "G.3 Funciones básicas dplyr",
    "text": "G.3 Funciones básicas dplyr\n\n\n\n\nG.3.1 Select\nselect Seleccionar variables relevantes\n\n# seleccionar nomnres de columnas que deseo conservar\ntbl_sii %>%\n  select(n_com, oficinas, comercio, vivienda)\n\n# A tibble: 210,662 × 4\n   n_com         oficinas comercio vivienda\n   <chr>            <dbl>    <dbl>    <dbl>\n 1 IQUIQUE              0        0        0\n 2 IQUIQUE              0        0        0\n 3 ALTO HOSPICIO        0        0        0\n 4 ALTO HOSPICIO        0        0        0\n 5 ALTO HOSPICIO        0        0        0\n 6 ALTO HOSPICIO        0        0        0\n 7 ALTO HOSPICIO        0        0        0\n 8 ALTO HOSPICIO        0        0        0\n 9 ALTO HOSPICIO        0        0        0\n10 ALTO HOSPICIO        0        0        0\n# ℹ 210,652 more rows\n\n# seleccionar nomnres de columnas que deseo eliminar anteponiendo un \"-\"\ntbl_sii %>%\n  select(-cod_com)\n\n# A tibble: 210,662 × 9\n   n_com         manzana   reg num_manz oficinas comercio vivienda total   AREA\n   <chr>         <chr>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl> <dbl>  <dbl>\n 1 IQUIQUE       1201-0      1        0        0        0        0     0   585.\n 2 IQUIQUE       1201-0      1        0        0        0        0     0 17291.\n 3 ALTO HOSPICIO 1211-0      1        0        0        0        0     0  1859.\n 4 ALTO HOSPICIO 1211-0      1        0        0        0        0     0   442.\n 5 ALTO HOSPICIO 1211-0      1        0        0        0        0     0   205.\n 6 ALTO HOSPICIO 1211-0      1        0        0        0        0     0  1200.\n 7 ALTO HOSPICIO 1211-0      1        0        0        0        0     0  4548.\n 8 ALTO HOSPICIO 1211-0      1        0        0        0        0     0   130.\n 9 ALTO HOSPICIO 1211-0      1        0        0        0        0     0   300.\n10 ALTO HOSPICIO 1211-0      1        0        0        0        0     0  6488.\n# ℹ 210,652 more rows\n\n\n\n\nG.3.2 Filter\n\nmi_comuna <- \"LAS CONDES\" \n\nsii_com <- tbl_sii %>%\n  filter(n_com == mi_comuna) \n \nhead(sii_com, 5)\n\n# A tibble: 5 × 10\n  n_com    manzana   reg cod_com num_manz oficinas comercio vivienda total  AREA\n  <chr>    <chr>   <dbl>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl> <dbl> <dbl>\n1 LAS CON… 15108-…    13   15108     2358        0        0     1316  1390 2358.\n2 LAS CON… 15108-…    13   15108     2360        0        0     1590  1622 2280.\n3 LAS CON… 15108-…    13   15108     2362        0        0     1436  1502 2659.\n4 LAS CON… 15108-…    13   15108     2364        0        0     1926  1926 3348.\n5 LAS CON… 15108-…    13   15108     2366        0        0     2584  2656 4390.\n\n\nfilter: Operadores Lógicos\n\n\n\n\n \n  \n    Operador \n    Comparación \n    Ejemplo \n    Resultado \n  \n \n\n  \n    x | y \n    x Ó y es verdadero \n    TRUE | FALSE \n    TRUE \n  \n  \n    x & y \n    x Y y son verdaderos \n    TRUE & FALSE \n    FALSE \n  \n  \n    !x \n    x no es verdadero (negación) \n    !TRUE \n    FALSE \n  \n  \n    isTRUE(x) \n    x es verdadero (afirmación) \n    isTRUE(TRUE) \n    TRUE \n  \n\n\n\n\n\nFiltrar las manzanas que tengan valores de oficina y comercio mayores a 0\n\nsii_com %>%\n  filter(oficinas > 0 & comercio > 0) \n\n# A tibble: 493 × 10\n   n_com manzana   reg cod_com num_manz oficinas comercio vivienda  total   AREA\n   <chr> <chr>   <dbl>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl>  <dbl>  <dbl>\n 1 LAS … 15108-…    13   15108     2400     322     3388    65422  1.22e5 1.06e5\n 2 LAS … 15108-…    13   15108     2407   30864     2518        0  7.50e4 4.04e3\n 3 LAS … 15108-…    13   15108     1392     424     9902        0  1.58e4 1.27e4\n 4 LAS … 15108-…    13   15108      336   45190     1432        0  8.28e4 3.24e3\n 5 LAS … 15108-…    13   15108      338     424.     244.    9993. 1.17e4 1.11e4\n 6 LAS … 15108-…    13   15108      338     414.     238.    9765. 1.14e4 1.06e4\n 7 LAS … 15108-…    13   15108      339    1120     5274     7748  1.49e4 9.38e3\n 8 LAS … 15108-…    13   15108      340     250       72    55206  7.23e4 1.22e4\n 9 LAS … 15108-…    13   15108      342     494     1914    47690  6.97e4 1.62e4\n10 LAS … 15108-…    13   15108      349   17826     1568        0  3.38e4 1.84e3\n# ℹ 483 more rows"
  },
  {
    "objectID": "r_project.html#resúmenes-estadísticos-con-dplyr",
    "href": "r_project.html#resúmenes-estadísticos-con-dplyr",
    "title": "Appendix B — R Project",
    "section": "G.4 Resúmenes Estadísticos con dplyr",
    "text": "G.4 Resúmenes Estadísticos con dplyr\n\n\n\nContabilizar cuantos metros cuadrados de oficina por cada comuna.\n\ntbl_resumen <-  tbl_sii %>%\n  group_by(n_com) %>%\n  summarise(Cantidad_mz = n(),\n            Total_of = sum(oficinas)) %>%\n  arrange(desc(Total_of)) # Ordenar\n\ntbl_resumen\n\n# A tibble: 170 × 3\n   n_com           Cantidad_mz Total_of\n   <chr>                 <int>    <dbl>\n 1 SANTIAGO CENTRO         686  6105996\n 2 LAS CONDES             2310  4248336\n 3 PROVIDENCIA             885  3495426\n 4 HUECHURABA             1160  1006138\n 5 QUILICURA              2592   751874\n 6 VITACURA                950   743734\n 7 SANTIAGO SUR            623   669270\n 8 Ã‘UÃ‘OA                1337   637982\n 9 SANTIAGO OESTE          586   586724\n10 PUDAHUEL               2775   561868\n# ℹ 160 more rows\n\n\nActividad\n\nContabilizar cuantos metros cuadrados de Comercio hay por cada comuna rdenar de mayor a menor.\nCrear tabla con las 10 comunas que tienen mayor densisdad de Comercio\n\n\n\n\n\n\n\nDensidad de comercio\n\n\n\nSe puede entender como la división de la cantidad de metros cuadrados de comercio dividio por el total de metros cuadrados."
  },
  {
    "objectID": "r_project.html#visualización-de-variables",
    "href": "r_project.html#visualización-de-variables",
    "title": "Appendix B — R Project",
    "section": "G.5 Visualización de Variables",
    "text": "G.5 Visualización de Variables\n\nG.5.1 Función Plot\n\noptions(scipen = 999) # evitas notación cientiífica\nhist(sii_com$vivienda, breaks = 50,\n     main = \"Histograma mt2 de Viviendas\", col = \"#225ea8\")\n\n\n\n# colores:https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3\n\n\n\nG.5.2 Package ggplot2\n\nlibrary(ggplot2)\nggplot(sii_com, aes(x = vivienda)) + \n  geom_histogram(bins = 50, fill = \"#225ea8\", color =\"black\")\n\n\n\n\n\n\n\n\nggplot2 con estilos y características\n\nggplot(sii_com, aes(x = vivienda)) +\n  geom_histogram(bins = 50, color = \"#c7e9b4\", fill = \"#1d91c0\")+\n  theme_bw()+\n  labs(title=\"Histograma mt2 de Viviendas\", x =\"Mt2. Viviendas\", y = \"Frecuencias\")+\n  theme(plot.title = element_text(face = \"bold\",colour= \"gray60\", size=10))"
  },
  {
    "objectID": "r_project.html#introducción",
    "href": "r_project.html#introducción",
    "title": "Appendix B — R Project",
    "section": "H.1 Introducción",
    "text": "H.1 Introducción\nUn rasgo es una cosa, un objeto del mundo real, como un edificio o un árbol. Al igual que los objetos, suelen estar formados por otros objetos. Lo mismo ocurre con los rasgos: un conjunto de rasgos puede formar un único rasgo. Una masa forestal puede ser un rasgo, un bosque puede ser un rasgo, una ciudad puede ser un rasgo. Un píxel de una imagen de satélite puede ser un rasgo, una imagen completa también puede ser un rasgo.\nLos elementos tienen una geometría que describe su ubicación en la Tierra y atributos que describen otras propiedades. La geometría de un árbol puede ser la delineación de su copa, de su tallo o el punto que indica su centro. Otras propiedades pueden ser su altura, color, diámetro a la altura del pecho en una fecha determinada, etc."
  },
  {
    "objectID": "r_project.html#lectura-de-insumos-espaciales",
    "href": "r_project.html#lectura-de-insumos-espaciales",
    "title": "Appendix B — R Project",
    "section": "H.2 Lectura de Insumos Espaciales",
    "text": "H.2 Lectura de Insumos Espaciales\n\n# install.packages(\"sf\")\nlibrary(sf)\ncrs_ll <- \"+proj=longlat +datum=WGS84 +no_defs\"\ncrs_utm <- \"+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0\"\ncenso <-  readRDS(\"data/rds/Zonas_Censales_2017_Nacional.rds\")"
  },
  {
    "objectID": "r_project.html#transformar-a-objeto-sf-simple-features",
    "href": "r_project.html#transformar-a-objeto-sf-simple-features",
    "title": "Appendix B — R Project",
    "section": "H.3 Transformar a objeto sf (simple features)",
    "text": "H.3 Transformar a objeto sf (simple features)\n\n# transformar a objeto sf (simple features)\ncenso_sf <- st_as_sf(censo)\n# head(censo_sf)\nnames(censo_sf)\n\n [1] \"REGION\"     \"NOM_REGION\" \"PROVINCIA\"  \"NOM_PROVIN\" \"COMUNA\"    \n [6] \"NOM_COMUNA\" \"URBANO\"     \"DISTRITO\"   \"LOC_ZON\"    \"GEOCODIGO\" \n[11] \"SHAPE_Leng\" \"SHAPE_Area\" \"geometry\""
  },
  {
    "objectID": "r_project.html#filtros-espaciales-por-data",
    "href": "r_project.html#filtros-espaciales-por-data",
    "title": "Appendix B — R Project",
    "section": "H.4 Filtros espaciales por data",
    "text": "H.4 Filtros espaciales por data\n\nlibrary(dplyr)\nmi_communa <-  \"LAS CONDES\"\n\nzonas_com <-  censo_sf %>% \n  filter(NOM_COMUNA == mi_communa)\n\nzonas_com %>% head()\n\nSimple feature collection with 6 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -70.56629 ymin: -33.41713 xmax: -70.47884 ymax: -33.36421\nGeodetic CRS:  +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0\n            REGION                       NOM_REGION PROVINCIA NOM_PROVIN COMUNA\n13114051001     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114041001     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114041003     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114161002     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114151003     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n13114021002     13 REGIÓN METROPOLITANA DE SANTIAGO       131   SANTIAGO  13114\n            NOM_COMUNA     URBANO DISTRITO LOC_ZON   GEOCODIGO SHAPE_Leng\n13114051001 LAS CONDES LAS CONDES        5       1 13114051001 0.02302722\n13114041001 LAS CONDES LAS CONDES        4       1 13114041001 0.09575698\n13114041003 LAS CONDES LAS CONDES        4       3 13114041003 0.06782420\n13114161002 LAS CONDES LAS CONDES       16       2 13114161002 0.06482893\n13114151003 LAS CONDES LAS CONDES       15       3 13114151003 0.04135677\n13114021002 LAS CONDES LAS CONDES        2       2 13114021002 0.04687558\n               SHAPE_Area                       geometry\n13114051001 0.00003357387 MULTIPOLYGON (((-70.56008 -...\n13114041001 0.00027087999 MULTIPOLYGON (((-70.47951 -...\n13114041003 0.00024510870 MULTIPOLYGON (((-70.5267 -3...\n13114161002 0.00014506080 MULTIPOLYGON (((-70.50789 -...\n13114151003 0.00008288767 MULTIPOLYGON (((-70.51477 -...\n13114021002 0.00005754391 MULTIPOLYGON (((-70.53606 -..."
  },
  {
    "objectID": "r_project.html#visualización-cartográficas",
    "href": "r_project.html#visualización-cartográficas",
    "title": "Appendix B — R Project",
    "section": "H.5 Visualización Cartográficas",
    "text": "H.5 Visualización Cartográficas\n\nH.5.1 Visualización estática Simple\n\n## Visualizar\n# Consideración el plot se realiza sobre la columna geometry\n\nnombre_plot <-  paste0(\"COMUNA DE \", mi_communa)\nplot(zonas_com$geometry, main = nombre_plot,col =\"orange\")\n\n\n\n\n\n\n\n\n\n\nH.5.2 Visualización estática con ggplot2\n\nlibrary(ggplot2)\n\n# Visualización ggplot y sf\nggplot() +\n  geom_sf(data = zonas_com, fill = \"orange\", alpha=0.5)+\n  ggtitle(nombre_plot) +\n  theme_bw() +\n  theme(legend.position=\"none\")+\n  theme(panel.grid.major = element_line(colour = \"gray80\"),\n        panel.grid.minor = element_line(colour = \"gray80\"))\n\n\n\n\n\n\n\n\n\n\nH.5.3 Visualización Dinámica con mapview\n\n# install.packages(\"mapview\")\nlibrary(mapview)\nm <- mapview(zonas_com, alpha = 0.5,\n        col.regions = \"orange\", color=\"gray80\",\n        legend =FALSE, cex = 3)\nm"
  },
  {
    "objectID": "r_project.html#referencias",
    "href": "r_project.html#referencias",
    "title": "Appendix B — R Project",
    "section": "H.6 Referencias:",
    "text": "H.6 Referencias:\n\nR para Ciencia de Datos\nRStudio para Estadística Descriptiva en Ciencias Sociales\nhttps://bookdown.org/jboscomendoza/r-principiantes4/estructuras-de-control.html\nhttps://rstudio-pubs-static.s3.amazonaws.com/623888_497a5388a98545c48e9b5b6bec4056f6.html\nPaletas de colores\nhttps://bookdown.org/jboscomendoza/r-principiantes4/estructuras-de-control.html\nhttps://es.r4ds.hadley.nz/iteración.html\nhttps://rstudio-pubs-static.s3.amazonaws.com/623888_497a5388a98545c48e9b5b6bec4056f6.html\nSimple Features for R"
  }
]