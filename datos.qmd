---
subtitle: "Lectura y Consolidación de Datos"
editor_options: 
  chunk_output_type: console
---

# Datos {#sec-data}


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval =FALSE)
options(scipen = 999, warn=-1)

#cargar Librerias
source("R/librerias.R")
# Cargar Funciones
source("R/funciones.R")

```

## Introducción

La lectura y limpieza de datos es una tarea fundamental en el análisis de datos, ya que los datos pueden contener errores, valores faltantes, duplicados o información inconsistente. Estos problemas pueden afectar la calidad de los resultados obtenidos a partir del análisis y, en algunos casos, incluso invalidar las conclusiones. Por lo tanto, es importante que los datos se sometan a procesos de limpieza y transformación antes de ser utilizados en el análisis.



## Lectura de Datos

Uno de los objetivos principales de este capítulo es replicar fielmente los procesos de lectura, limpieza y estructura que realizan normalmente los analistas. Por lo tanto, se requiere tener bases de datos con la misma forma y estructura que las originales. Para este fin, se utilizará una base de datos llamada `samples`, que es una copia de la original, pero anonimizada aleatoriamente.Los datos originales fueron anomimizados mediante distribución aleatoria por columna, lo que impostibilita reconstruir la base original y a su vez los datos mantienen su estructura y tipología tal como se distribuyen los datos originales.


::: {.callout-tip}
## Directorio de Trabajo

Definir correctamente el directorio de trabajo en R, que corresponde al lugar o carpeta de origen de donde R va acceder a los diferentes archivos. (Ver @sec-wd)

:::





### Datos CSV

Una forma común de almacenar tablas es mediante archivos de valores separados por comas (CSV). Estos archivos tienen una extensión `.csv` y se utilizan ampliamente para compartir datos porque son compatibles con muchos sistemas diferentes y ocupan relativamente poco espacio de almacenamiento. Una ventaja de usar archivos .csv es la disponibilidad de la función `read.csv()`, que está optimizada para importar archivos CSV y esta disponible por defeto en R base.

**Lectura de Unitaria:** A continuación procedermos a la lectura de uno de los archivos CSV. Recordar definir un directorio de trabajo que será el punto de partida donde se accederá a los diferentes archivos del proyecto. (Ver @sec-wd)


```{r}
# 1. Definir Diferectorio de trabajo con setwd("") o con Rstudio
# 2. Lectura y asignar nombre de variables

partes_1T_2015 <- read.csv(
  file = "data/samples/Base Estadistica/CSV/partes_1er_trim_2015.csv") 

# dim(partes_1T_2015)
# str(partes_1T_2015)
# head(partes_1T_2015)
```

**Lectura de Secuencial:** En este caso si todos los archivos que se van a leer se encuentran en la misma carpeta o directorio se recomienda que declare esa ruta en una variable en R y posteriormente genere la ruta completa adicionando solamente el nombre del archivo para esto usaremos la función `paste0()` para concatener cadenas de texto. (Ver @sec-string)


```{r}
# Declarar la ruta en una variable (considerar que finaliza con slash "/")
path_csv <-  "data/samples/Base Estadistica/CSV/"

# Partes
# Declarar la ruta del archivo + nombre
partes_1T_2015 <- read.csv(file =  paste0(path_csv, "partes_1er_trim_2015.csv"))
partes_2T_2015 <- read.csv(file =  paste0(path_csv, "partes_2do_trim_2015.csv"))


# Participaciones
particp_1T_2015 <- read.csv(
  file =  paste0(path_csv, "participantes_1er_trim_2015.csv"))
particp_2T_2015 <- read.csv(
  file =  paste0(path_csv, "participantes_2do_trim_2015.csv"))


```


**Unir Bases:** Uno de los objetivos puede ser unificar o consolidar bases del mismo tipo pero de diferentes periodos, se procede a su unidicación utilizando una de las formas más simples que es mediante la función `rbind()` que unir por filas (rows). 

::: {.callout-warning}
## Cantidad de Columnnas
Para que funione correctamente debemos estar seguros que las candidad de columnas de todos los dataframes que se van a unir deben ser idénticos.
:::

```{r}
# Verificar si la cantidad de columnas son identicas
ncol(partes_1T_2015)
ncol(partes_2T_2015)


# Unir Partes
partes_2015 <-  rbind(partes_1T_2015, partes_2T_2015)
dim(partes_2015)


# Unir Participaciones
participaciones_2015 <-  rbind(particp_1T_2015, particp_2T_2015)
dim(participaciones_2015)
```

**Guardar Bases Conbinadas**: Aquí hau que tener claro cual será carpeta de destino para nuestro caso en `data/resultados/combinadas` esta carpeta debe existir en el directorio. La función que se usará para guardar es `write.csv()`. 

```{r}
path_out = "data/resultados/combinadas/"

file_name_partes <- "partes_2015.csv"
write.csv(x = partes_2015, file = paste0(path_out, file_name_partes))


file_name_particp <- "participaciones_2015.csv"
write.csv(x = participaciones_2015, file = paste0(path_out, file_name_particp))
```



### Datos TXT

Otra forma de almacenar tablas de datos es mediante archivos de texto plano con extensión `.txt` y que tambien se utilizan ampliamente para compartir datos porque son compatibles con muchos sistemas diferentes y ocupan relativamente poco espacio de almacenamiento. Utilizaremos la función `read.delim()` que también es de R base. 

::: {.callout-warning}
## Definir el elemento separador

Una consideración importante, para que R entienda que los datos que lee desde un archivo TXT corresponden a tablas de datos, hay que declarar que caracter es separador, en lcaso de los archivos de samples es `"\t"` que representa tab. Puede variar de cada tipo de archivo.

:::


**Lectura de Unitaria:** A continuación procedermos a la lectura de uno de los archivos CSV. Recordar definir un directorio de trabajo que será el punto de partida donde se accederá a los diferentes archivos del proyecto. (Ver @sec-wd)


```{r}
# 1. Definir Diferectorio de trabajo con setwd("") o con Rstudio
# 2. Lectura y asignar nombre de variables

partes_1T_2015_txt <- read.delim(
  file = "data/samples/Base Estadistica/TXT/partes_1er_trim_2015.txt",
  header = TRUE, sep = "\t", quote = "",  stringsAsFactors = FALSE) 

dim(partes_1T_2015_txt)
str(partes_1T_2015_txt)
head(partes_1T_2015_txt)
```

**Lectura de Secuencial:** En este caso si todos los archivos que se van a leer se encuentran en la misma carpeta o directorio se recomienda que declare esa ruta en una variable en R y posteriormente genere la ruta completa adicionando solamente el nombre del archivo para esto usaremos la función `paste0()` para concatener cadenas de texto.


```{r}
# Declarar la ruta en una variable (considerar que finaliza con slash "/")
path_txt <-  "data/samples/Base Estadistica/TXT/"

# Partes
# Declarar la ruta del archivo + nombre
partes_1T_2015_txt <- read.delim(
  file =  paste0(path_txt, "partes_1er_trim_2015.txt"),
  header = TRUE, sep = "\t", quote = "",  stringsAsFactors = FALSE)

partes_2T_2015_txt <- read.delim(
  file =  paste0(path_txt, "partes_2do_trim_2015.txt"),
  header = TRUE, sep = "\t", quote = "",  stringsAsFactors = FALSE)


# Participaciones
particp_1T_2015_txt <- read.delim(
  file =  paste0(path_txt, "participantes_1er_trim_2015.txt"),
  header = TRUE, sep = "\t", quote = "",  stringsAsFactors = FALSE)

particp_2T_2015_txt <- read.delim(
  file =  paste0(path_txt, "participantes_2do_trim_2015.txt"),
  header = TRUE, sep = "\t", quote = "",  stringsAsFactors = FALSE)

```


**Unir Bases:**


```{r}
# Verificar si la cantidad de columnas son identicas
dim(partes_1T_2015_txt)
dim(partes_2T_2015_txt)


# Unir Partes
partes_2015_txt <-  rbind(partes_1T_2015_txt, partes_2T_2015_txt)
dim(partes_2015_txt)


# Unir Participaciones
participaciones_2015_txt <-  rbind(particp_1T_2015_txt, particp_2T_2015_txt)
dim(participaciones_2015_txt)
```

**Guardar Bases Conbinadas**: La función que se usará para guardar es `write.table()`. 

```{r}
path_out = "data/resultados/combinadas/"

file_name_partes <- "partes_2015.txt"
write.table(x = partes_2015_txt, file = paste0(path_out, file_name_partes),
            sep = "\t", na = "", quote = FALSE, eol = "\n")


file_name_particp <- "participaciones_2015.txt"
write.table(x = participaciones_2015_txt, file = paste0(path_out, file_name_particp),
            sep = "\t", na = "", quote = FALSE, eol = "\n")
```



### Datos Espaciales SHP

Los objetos espaciales en R representan datos georreferenciados, lo que significa que están vinculados a una ubicación en el mundo real. Los objetos espaciales se pueden representar en mapas y gráficos, y se pueden analizar para identificar patrones y tendencias en los datos. Para nuestro casos, los objetos espaciales son tipo puntos que representan casos policiales en formato shapefile.Para su lectura y manipulación utilizaremos la librería `sf` ({{< var library.sf >}}).

::: {.callout-note}
## Librería sf

El uso de sf nos facilitará la manipulación de datos espaciales tipo vectorial como puntos, polígonos o líneas, su característica principal es que se trabaja como si fuese una tabla y en una sola columna almacena las información espacial (`geometry`)

:::


**Lectura de Unitaria:** A continuación procedermos a la lectura de uno de los archivos Shapefiles con su estensión `.shp`. Para la lectura utilizaremos la función `st_read()`


```{r}
# 1. Cargar Librería
library(sf)
# 2. Lectura y asignar nombre de variables

casos_T1_2015 <- st_read(dsn = "data/samples/Base Geo/casos_2015_t1.shp") 

dim(partes_1T_2015_txt)
str(partes_1T_2015_txt)
partes_1T_2015_txt
```

**Lectura de Secuencial:** En este caso si todos los archivos que se van a leer se encuentran en la misma carpeta o directorio se recomienda que declare esa ruta en una variable en R y posteriormente genere la ruta completa adicionando solamente el nombre del archivo para esto usaremos la función `paste0()` para concatener cadenas de texto.


```{r}
# Declarar la ruta en una variable (considerar que finaliza con slash "/")
path_txt <-  "data/samples/Base Geo/"

# Casps
# unir la ruta del archivo + nombre
casos_T1_2015 <- st_read(paste0(path_txt, "casos_2015_t1.shp"))
casos_T2_2015 <- st_read(paste0(path_txt, "casos_2015_t2.shp"))

```


**Unir Bases:**


No se pueden unir ya que no tienen las misma columnas
```{r}
# Verificar si la cantidad de columnas son identicas
dim(casos_T1_2015)
dim(casos_T2_2015)


# Unir Partes
casos_2015 <-  rbind(casos_T1_2015, casos_T2_2015)
# Error in rbind.data.frame(...) : 
  # numbers of columns of arguments do not match
```

Solución 1: Unir solo las colunas en común

```{r}
# encontrar la columnas en común
common <- intersect(colnames(casos_T1_2015), colnames(casos_T2_2015))

# unir bases seleccionando solo als columnas en común
casos_2015_s1 <- rbind(casos_T1_2015[common], casos_T2_2015[common])
casos_2015_s1

```

Solución 2: Unir y en la base faltante rellena con `NA` usando `dplyr::bind_rows()`


```{r}
library(dplyr)

casos_2015_s2 <- bind_rows(casos_T1_2015, casos_T2_2015)
casos_2015_s2 
```





**Guardar Bases Conbinadas**: La función que se usará para guardar es `write.table()`. 

```{r}
path_out = "data/resultados/combinadas/"

file_name_comun <- "casos_2015_comun.shp"
st_write(casos_2015_s1, paste0(path_out, file_name_comun), delete_dsn = T)



file_name_all <- "casos_2015_all.shp"
st_write(casos_2015_s2, paste0(path_out, file_name_all), delete_dsn = T)

```

## Conclusión 

En este capítulo se presentaron conocimientos esenciales para la lectura de datos tal como son adquiridos, con el objetivo de representar de manera fidedigna la etapa de pretratamiento que realizan los analistas. Además, se combinaron los diferentes periodos de cada tipo de datos y se guardaron de forma segura. En los siguientes capítulos se presentarán flujos de trabajo más eficientes y automatizados, pero por ahora es importante tener claridad sobre los pasos básicos.





