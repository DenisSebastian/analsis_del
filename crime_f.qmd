---
subtitle: "Funciones de uso Frecuente"
---

# Funciones Generales {#sec-fuctions}

## Dataframe to SF Object {#sec-fnc_df2sf}

Convertir DataFrame con columnas de latitud y longitud a un objeto espacial llamado simple feature además se le puede asignar un sistema de referencia de coordenadas.



```{r eval=FALSE}
# dataframe a sf
df2sf <- function(df, lon ="lon", lat ="lat", crs_base = 4326) {
  sf_object <- df %>%
    dplyr::filter(!is.na(lon)|!is.na(lat)) %>%
    sf::st_as_sf(coords = c(lon, lat),
                 crs = crs_base, agr = "constant")
  return(sf_object)
}
```


Al inverso esta función permite convertir de un objeto espacial tipo puntos a una tabla de datos a la cual se le agregará latitud y longitud como columnas.

```{r eval=FALSE}
# sf to dataframe
sf2df <- function(sf_points){
  df <- sfheaders::sf_to_df( sf_points, fill = TRUE ) %>% 
    rename(lon = x, lat = y)
  return(df)
}

```


## Imputar datos por intersect {#sec-fnc_addIntersect}

```{r eval=FALSE}
add_info_intersects <-  function(pol_info, sf_data){
# versión eficiente de intersects
  id_int <- sapply(st_intersects(sf_data, pol_info), 
                   function(z) if (length(z)==0) NA_integer_ else z[1])
  
  pol_info <- pol_info %>% 
    mutate(id = 1:nrow(.)) %>% 
    st_drop_geometry()
  
  resultados <- sf_data%>%
    mutate(id = id_int) %>%
    left_join(pol_info, by ="id")
  return(resultados)
  
}
```


## Tablas Resumen

Crea un resumen estadístico por cada una de las comunes columnas del data frame

```{r eval=FALSE}
resumen_base <- function(base, name_base, n_samples = 5){ 
  smp <- sample(nrow(base), size = n_samples, replace = F)
  res <- NULL
  for(i in 1:ncol(base)){
    r <- data.frame(
      col_name = as.character(names(base)[i]),
      # col_name_cor =  names(janitor::clean_names(base))[i],
      n_rows = nrow(base),
      n_unique = length(unique(base[,i])),
      n_NA = sum(is.na(base[,i])),
      min = round(min(base[,i],  na.rm = T), 3),
      max = round(max(base[,i],  na.rm = T), 3),
      mean = round(mean(base[,i],  na.rm = T), 3),
      sample1 = as.character(base[smp[1],i]),
      sample2 = as.character(base[smp[2],i]),
      sample3 = as.character(base[smp[3],i]),
      sample4 = as.character(base[smp[4],i]),
      sample5 = as.character(base[smp[5],i])
    )
    r <- r %>%
      mutate(base_name = name_base, 
             porc_NA = round((n_NA / nrow(base)) * 100, 2),
             col_name = gsub(pattern = "\\.", replacement = " ", x = col_name),# puntos -> espacios
      )%>%
      dplyr::select(base_name, col_name,  n_rows, n_unique, n_NA, porc_NA, everything())
    
    res <- rbind(res, r)
  }
  return(res)
  
}
```


## Funciones de uso general

```{r eval=FALSE}
# Si no existe directorio lo crea
make_dir <- function(path){
  if (!dir.exists(path)) dir.create(path, recursive = TRUE)
}

# transformar -999 a NA
fix_missing <- function(x) {
  if(is.numeric(x)){
    x[x == -999] <- NA
    
  }
  return(x)
}


# transformar NA a 0
fix_NA_0 <- function(x) {
  x[is.na(x)] <- 0
  return(x)
}



# Reeplaza puntos pomas
pto_por_coma <- function(x){
  format(x, big.mark = ".", decimal.mark = "," ,
         scientific = FALSE)
  
}

simpleCap <- function(x) {
  s <- strsplit(x, " ")[[1]]
  paste(toupper(substring(s, 1, 1)), substring(s, 2),
        sep = "", collapse = " ")
}

sf_toupper <-  function(sf_object){
  names(sf_object)[1:(ncol(sf_object)-1)] <- toupper(names(sf_object)[1:(ncol(sf_object)-1)])
  return(sf_object)
}

# función paara saber catidad de acuerdo un porcentaje
porc_df <- function(dataframe, porcentaje){
  if(porcentaje>100){
    stop("Porcentaje NO puede ser mayor que 100")
  }else{
    num <- round(nrow(dataframe)*(porcentaje/100))
  }
  return(num)
}
```


## Cuenta duplicados por columna

```{r eval=FALSE}
duplicados <- function(file, columna) {
  if (columna == "geometry") {
    col <- file %>% dplyr::select(all_of(columna))
  } else{
    col <-
      file %>% st_drop_geometry() %>% dplyr::select(all_of(columna))
  }
  
  d <- col %>% duplicated() %>% sum()
  return(d)
}
```


## Leer delitos rds por año

```{r eval=FALSE}

read_delitos <-
  function(path_data = "data/delitos/delitos_base/", year) {
    delitos <- readRDS(paste0(path_data, "delitos_", year, ".rds"))
    return(delitos)
  }


```



## Función seleccionar muestra n


```{r}
muestra_n <-  function(df, n, random = F){
  if(isTRUE(random)){
    x <- dplyr::slice_sample(df, n = n, replace = F)
  }else{
    x <- df[1:n]
  }
  return(x)
}
```


## Función seleccionar muestra por fracción

```{r}
muestra_frac <-  function(df, prop){
    x <- dplyr::slice_sample(df, prop = prop, replace = F)
  return(x)
}

```


## Muestreo Aleatorio

Función que cambia orden de elementos en un vector, en el caso de aplicación este vector será una columna.

```{r}
# valores aleatios por columna

generar_datos_aleatorios <- function(columna) {
  # Obtener la longitud de la columna
  longitud <- length(columna)
  # Generar datos aleatorios de la misma longitud
  datos_aleatorios <- sample(columna, longitud)
  return(datos_aleatorios)
}
```


A continuación se presentan una serie de funciones de lectura de archivos en diferentes formatos, que aposteriormente noniminza aleatoriamente cada columna utilizando la función `generar_datos_aleatorios()`, luego toma una muestra de datos y finalmente guarda los resultados. Lo anterior, se crearon funciones para datos tipo csv, txt y shapefile.

```{r}
samples_csv <- function(path_in, path_out, file_name, n_samples){
  
  print("Lectura")
  tabla_anonima <- read.csv(file = paste0(path_in, file_name),
                            stringsAsFactors = FALSE) 
  
  
  print("Revolviendo datos por columna")
  tabla_anonima  <- tabla_anonima%>%
    mutate_all(~ generar_datos_aleatorios(.))%>% 
    sample_n(size = n_samples, replace = F) 
  
  print("guardando")
  write.csv(x = tabla_anonima, file = paste0(path_out, file_name))
  return(tabla_anonima)
}
```


```{r}
samples_txt <- function(path_in, path_out, file_name, n_samples, 
                        header = TRUE, sep = "\t"){
  
  print("Lectura")
  tabla_anonima <- read.delim(file = paste0(path_in, file_name),
                              sep = sep, header = header, 
                              quote = "", 
                              stringsAsFactors = FALSE) 
  
  print("Revolviendo datos por columna")
  tabla_sampled  <- tabla_anonima%>%
    mutate_all(~ generar_datos_aleatorios(.))%>% 
    sample_n(size = n_samples, replace = F) 
  
  print("guardando")
  write.table(x = tabla_sampled, file = paste0(path_out, file_name), 
               sep = sep, na = "", quote = FALSE, eol = "\n")
  return(tabla_sampled)
}
```


```{r}
samples_shp <- function(path_in, path_out, file_name, n_samples){
  
  print("Lectura")
  tabla_sf <- st_read(paste0(path_in, file_name)) 
  
  print("Revolviendo datos por columna")
  tabla_sf_anomina  <- tabla_sf%>%
    mutate_all(~ generar_datos_aleatorios(.))%>% 
    sample_n(size = n_samples, replace = F) 
  
  print("guardando")
  st_write(tabla_sf_anomina, paste0(path_out, file_name), delete_dsn =T)
  return(tabla_sf_anomina)
}

```

